/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { CAPSTONE_AIRPAY_Q3_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_INVOICE_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  73, 150, 245, 48, 139, 10, 209, 27,
]);

export function getInitializeInvoiceAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_INVOICE_ACCOUNT_DISCRIMINATOR
  );
}

export type InitializeInvoiceAccountInstruction<
  TProgram extends string = typeof CAPSTONE_AIRPAY_Q3_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountMerchant extends string | AccountMeta<string> = string,
  TAccountInvoiceAccount extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountMerchant extends string
        ? WritableSignerAccount<TAccountMerchant> &
            AccountSignerMeta<TAccountMerchant>
        : TAccountMerchant,
      TAccountInvoiceAccount extends string
        ? WritableAccount<TAccountInvoiceAccount>
        : TAccountInvoiceAccount,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountVault extends string
        ? ReadonlyAccount<TAccountVault>
        : TAccountVault,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeInvoiceAccountInstructionData = {
  discriminator: ReadonlyUint8Array;
  seed: bigint;
};

export type InitializeInvoiceAccountInstructionDataArgs = {
  seed: number | bigint;
};

export function getInitializeInvoiceAccountInstructionDataEncoder(): FixedSizeEncoder<InitializeInvoiceAccountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['seed', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_INVOICE_ACCOUNT_DISCRIMINATOR,
    })
  );
}

export function getInitializeInvoiceAccountInstructionDataDecoder(): FixedSizeDecoder<InitializeInvoiceAccountInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['seed', getU64Decoder()],
  ]);
}

export function getInitializeInvoiceAccountInstructionDataCodec(): FixedSizeCodec<
  InitializeInvoiceAccountInstructionDataArgs,
  InitializeInvoiceAccountInstructionData
> {
  return combineCodec(
    getInitializeInvoiceAccountInstructionDataEncoder(),
    getInitializeInvoiceAccountInstructionDataDecoder()
  );
}

export type InitializeInvoiceAccountAsyncInput<
  TAccountConfig extends string = string,
  TAccountMerchant extends string = string,
  TAccountInvoiceAccount extends string = string,
  TAccountMint extends string = string,
  TAccountVault extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  config: Address<TAccountConfig>;
  merchant: TransactionSigner<TAccountMerchant>;
  invoiceAccount?: Address<TAccountInvoiceAccount>;
  mint: Address<TAccountMint>;
  vault?: Address<TAccountVault>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  seed: InitializeInvoiceAccountInstructionDataArgs['seed'];
};

export async function getInitializeInvoiceAccountInstructionAsync<
  TAccountConfig extends string,
  TAccountMerchant extends string,
  TAccountInvoiceAccount extends string,
  TAccountMint extends string,
  TAccountVault extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CAPSTONE_AIRPAY_Q3_PROGRAM_ADDRESS,
>(
  input: InitializeInvoiceAccountAsyncInput<
    TAccountConfig,
    TAccountMerchant,
    TAccountInvoiceAccount,
    TAccountMint,
    TAccountVault,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeInvoiceAccountInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountMerchant,
    TAccountInvoiceAccount,
    TAccountMint,
    TAccountVault,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CAPSTONE_AIRPAY_Q3_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    merchant: { value: input.merchant ?? null, isWritable: true },
    invoiceAccount: { value: input.invoiceAccount ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.invoiceAccount.value) {
    accounts.invoiceAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            105, 110, 118, 111, 105, 99, 101, 95, 97, 99, 99, 111, 117, 110,
            116,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.merchant.value)),
        getU64Encoder().encode(expectSome(args.seed)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.invoiceAccount.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.merchant),
      getAccountMeta(accounts.invoiceAccount),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeInvoiceAccountInstructionDataEncoder().encode(
      args as InitializeInvoiceAccountInstructionDataArgs
    ),
  } as InitializeInvoiceAccountInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountMerchant,
    TAccountInvoiceAccount,
    TAccountMint,
    TAccountVault,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeInvoiceAccountInput<
  TAccountConfig extends string = string,
  TAccountMerchant extends string = string,
  TAccountInvoiceAccount extends string = string,
  TAccountMint extends string = string,
  TAccountVault extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  config: Address<TAccountConfig>;
  merchant: TransactionSigner<TAccountMerchant>;
  invoiceAccount: Address<TAccountInvoiceAccount>;
  mint: Address<TAccountMint>;
  vault: Address<TAccountVault>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  seed: InitializeInvoiceAccountInstructionDataArgs['seed'];
};

export function getInitializeInvoiceAccountInstruction<
  TAccountConfig extends string,
  TAccountMerchant extends string,
  TAccountInvoiceAccount extends string,
  TAccountMint extends string,
  TAccountVault extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CAPSTONE_AIRPAY_Q3_PROGRAM_ADDRESS,
>(
  input: InitializeInvoiceAccountInput<
    TAccountConfig,
    TAccountMerchant,
    TAccountInvoiceAccount,
    TAccountMint,
    TAccountVault,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeInvoiceAccountInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountMerchant,
  TAccountInvoiceAccount,
  TAccountMint,
  TAccountVault,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CAPSTONE_AIRPAY_Q3_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    merchant: { value: input.merchant ?? null, isWritable: true },
    invoiceAccount: { value: input.invoiceAccount ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.merchant),
      getAccountMeta(accounts.invoiceAccount),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeInvoiceAccountInstructionDataEncoder().encode(
      args as InitializeInvoiceAccountInstructionDataArgs
    ),
  } as InitializeInvoiceAccountInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountMerchant,
    TAccountInvoiceAccount,
    TAccountMint,
    TAccountVault,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeInvoiceAccountInstruction<
  TProgram extends string = typeof CAPSTONE_AIRPAY_Q3_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    merchant: TAccountMetas[1];
    invoiceAccount: TAccountMetas[2];
    mint: TAccountMetas[3];
    vault: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: InitializeInvoiceAccountInstructionData;
};

export function parseInitializeInvoiceAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeInvoiceAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      merchant: getNextAccount(),
      invoiceAccount: getNextAccount(),
      mint: getNextAccount(),
      vault: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeInvoiceAccountInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
