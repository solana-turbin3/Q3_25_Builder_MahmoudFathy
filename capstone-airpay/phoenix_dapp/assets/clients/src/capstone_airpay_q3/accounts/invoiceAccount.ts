/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const INVOICE_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  105, 207, 226, 227, 85, 35, 132, 40,
]);

export function getInvoiceAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INVOICE_ACCOUNT_DISCRIMINATOR
  );
}

export type InvoiceAccount = {
  discriminator: ReadonlyUint8Array;
  seed: bigint;
  merchant: Address;
  mint: Address;
  bump: number;
};

export type InvoiceAccountArgs = {
  seed: number | bigint;
  merchant: Address;
  mint: Address;
  bump: number;
};

export function getInvoiceAccountEncoder(): FixedSizeEncoder<InvoiceAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['seed', getU64Encoder()],
      ['merchant', getAddressEncoder()],
      ['mint', getAddressEncoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INVOICE_ACCOUNT_DISCRIMINATOR })
  );
}

export function getInvoiceAccountDecoder(): FixedSizeDecoder<InvoiceAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['seed', getU64Decoder()],
    ['merchant', getAddressDecoder()],
    ['mint', getAddressDecoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getInvoiceAccountCodec(): FixedSizeCodec<
  InvoiceAccountArgs,
  InvoiceAccount
> {
  return combineCodec(getInvoiceAccountEncoder(), getInvoiceAccountDecoder());
}

export function decodeInvoiceAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<InvoiceAccount, TAddress>;
export function decodeInvoiceAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<InvoiceAccount, TAddress>;
export function decodeInvoiceAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<InvoiceAccount, TAddress> | MaybeAccount<InvoiceAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getInvoiceAccountDecoder()
  );
}

export async function fetchInvoiceAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<InvoiceAccount, TAddress>> {
  const maybeAccount = await fetchMaybeInvoiceAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeInvoiceAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<InvoiceAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeInvoiceAccount(maybeAccount);
}

export async function fetchAllInvoiceAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<InvoiceAccount>[]> {
  const maybeAccounts = await fetchAllMaybeInvoiceAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeInvoiceAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<InvoiceAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeInvoiceAccount(maybeAccount)
  );
}

export function getInvoiceAccountSize(): number {
  return 81;
}
