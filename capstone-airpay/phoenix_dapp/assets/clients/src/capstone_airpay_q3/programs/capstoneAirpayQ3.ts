/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedInitializeConfigInstruction,
  type ParsedInitializeInvoiceAccountInstruction,
} from '../instructions';

export const CAPSTONE_AIRPAY_Q3_PROGRAM_ADDRESS =
  'J4aBD9W7P8sij5dLP4KZLiJZrCZXoRFazpGaVhcZuwZZ' as Address<'J4aBD9W7P8sij5dLP4KZLiJZrCZXoRFazpGaVhcZuwZZ'>;

export enum CapstoneAirpayQ3Account {
  Config,
  InvoiceAccount,
}

export function identifyCapstoneAirpayQ3Account(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CapstoneAirpayQ3Account {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([155, 12, 170, 224, 30, 250, 204, 130])
      ),
      0
    )
  ) {
    return CapstoneAirpayQ3Account.Config;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([105, 207, 226, 227, 85, 35, 132, 40])
      ),
      0
    )
  ) {
    return CapstoneAirpayQ3Account.InvoiceAccount;
  }
  throw new Error(
    'The provided account could not be identified as a capstoneAirpayQ3 account.'
  );
}

export enum CapstoneAirpayQ3Instruction {
  InitializeConfig,
  InitializeInvoiceAccount,
}

export function identifyCapstoneAirpayQ3Instruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CapstoneAirpayQ3Instruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([208, 127, 21, 1, 194, 190, 196, 70])
      ),
      0
    )
  ) {
    return CapstoneAirpayQ3Instruction.InitializeConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([73, 150, 245, 48, 139, 10, 209, 27])
      ),
      0
    )
  ) {
    return CapstoneAirpayQ3Instruction.InitializeInvoiceAccount;
  }
  throw new Error(
    'The provided instruction could not be identified as a capstoneAirpayQ3 instruction.'
  );
}

export type ParsedCapstoneAirpayQ3Instruction<
  TProgram extends string = 'J4aBD9W7P8sij5dLP4KZLiJZrCZXoRFazpGaVhcZuwZZ',
> =
  | ({
      instructionType: CapstoneAirpayQ3Instruction.InitializeConfig;
    } & ParsedInitializeConfigInstruction<TProgram>)
  | ({
      instructionType: CapstoneAirpayQ3Instruction.InitializeInvoiceAccount;
    } & ParsedInitializeInvoiceAccountInstruction<TProgram>);
